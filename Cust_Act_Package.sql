CREATE OR REPLACE PACKAGE CUST_ACT_PK AS
	
	PROCEDURE CHECK_LAST_FIVE_TRANSACTION(A_ACC_NO TRANSACTION.PRI_ACC_NO%TYPE);
    PROCEDURE BANK_STATEMENT(C_ACC_NO TRANSACTION.PRI_ACC_NO%TYPE, 
        START_DATE TRANSACTION.TRANS_DATE%TYPE, 
        END_DATE TRANSACTION.TRANS_DATE%TYPE);
    PROCEDURE UPDATE_CUST_CONTACT_DETAILS(C_CUST_ID CUSTOMER.CUST_ID%TYPE, 
        C_EMAIL CUSTOMER.EMAIL%TYPE, 
        C_MOB_NO CUSTOMER.MOB_NO%TYPE);
    PROCEDURE CUST_TRANSACTION (CT_USERNAME CUSTOMER.USERNAME%TYPE, 
        CT_PASSWORD CUSTOMER.PASSWORD%TYPE, 
        CT_ACC_NO ACCOUNT.ACC_NO%TYPE, 
        CT_RECEIVER_ACC_NO ACCOUNT.ACC_NO%TYPE, 
        CT_AMOUNT TRANSACTION.AMOUNT%TYPE,
        CT_TRANS_TYPE TRANSACTION.TRANS_TYPE%TYPE);
END;
/


CREATE OR REPLACE PACKAGE BODY CUST_ACT_PK 
AS

PROCEDURE CHECK_LAST_FIVE_TRANSACTION(A_ACC_NO IN TRANSACTION.PRI_ACC_NO%TYPE) 
AS
CURSOR CUS_FIVE_TRANS IS 
    SELECT TRANS_ID, PRI_ACC_NO, TRANS_TYPE, TRANS_DATE, AMOUNT, DEBIT_CREDIT_FLAG FROM DB_ADMIN.TRANSACTION 
    WHERE PRI_ACC_NO = A_ACC_NO 
    ORDER BY TRANS_DATE DESC 
    FETCH FIRST 5 ROWS ONLY;
    
TYPE TRANS_REC IS RECORD (
    TRANS_ID TRANSACTION.TRANS_ID%TYPE, 
    PRI_ACC_NO TRANSACTION.PRI_ACC_NO%TYPE, 
    TRANS_TYPE TRANSACTION.TRANS_TYPE%TYPE, 
    TRANS_DATE TRANSACTION.TRANS_DATE%TYPE, 
    AMOUNT TRANSACTION.AMOUNT%TYPE, 
    DEBIT_CREDIT_FLAG TRANSACTION.DEBIT_CREDIT_FLAG%TYPE
);

T_TRANS_REC TRANS_REC;
BEGIN 	
    OPEN CUS_FIVE_TRANS;
	LOOP
        FETCH CUS_FIVE_TRANS INTO T_TRANS_REC;
        --DBMS_OUTPUT.PUT_LINE (is_open);
        EXIT WHEN CUS_FIVE_TRANS%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('TRANSACTION DETAILS -> ID -> '||T_TRANS_REC.TRANS_ID||' -> ACCOUNT_NO ->'||T_TRANS_REC.PRI_ACC_NO||' -> TRANS_TYPE -> '||T_TRANS_REC.TRANS_TYPE||' -> TRANS_DATE -> '||T_TRANS_REC.TRANS_DATE||' -> AMOUNT -> '||T_TRANS_REC.AMOUNT||' -> CREDIT_DEBIT -> '||T_TRANS_REC.DEBIT_CREDIT_FLAG);
    END LOOP;
COMMIT;
END CHECK_LAST_FIVE_TRANSACTION;

----------------------------------------------------------------
PROCEDURE BANK_STATEMENT(C_ACC_NO IN TRANSACTION.PRI_ACC_NO%TYPE, 
    START_DATE IN TRANSACTION.TRANS_DATE%TYPE, 
    END_DATE IN TRANSACTION.TRANS_DATE%TYPE) 
AS
CURSOR CUS_TRANS IS 
    SELECT TRANS_ID, PRI_ACC_NO, TRANS_TYPE, TRANS_DATE, AMOUNT, DEBIT_CREDIT_FLAG FROM DB_ADMIN.TRANSACTION 
    WHERE PRI_ACC_NO = C_ACC_NO 
    AND TRANS_DATE BETWEEN START_DATE AND END_DATE
    ORDER BY TRANS_DATE DESC;
    
TYPE TRANS_REC IS RECORD (
    TRANS_ID TRANSACTION.TRANS_ID%TYPE, 
    PRI_ACC_NO TRANSACTION.PRI_ACC_NO%TYPE, 
    TRANS_TYPE TRANSACTION.TRANS_TYPE%TYPE, 
    TRANS_DATE TRANSACTION.TRANS_DATE%TYPE, 
    AMOUNT TRANSACTION.AMOUNT%TYPE, 
    DEBIT_CREDIT_FLAG TRANSACTION.DEBIT_CREDIT_FLAG%TYPE
);

T_TRANS_REC TRANS_REC;
BEGIN 	
    OPEN CUS_TRANS;
	LOOP
        FETCH CUS_TRANS INTO T_TRANS_REC;
        --DBMS_OUTPUT.PUT_LINE (is_open);
        EXIT WHEN CUS_TRANS%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('TRANSACTION DETAILS -> ID -> '||T_TRANS_REC.TRANS_ID||' -> ACCOUNT_NO ->'||T_TRANS_REC.PRI_ACC_NO||' -> TRANS_TYPE -> '||T_TRANS_REC.TRANS_TYPE||' -> TRANS_DATE -> '||T_TRANS_REC.TRANS_DATE||' -> AMOUNT -> '||T_TRANS_REC.AMOUNT||' -> CREDIT_DEBIT -> '||T_TRANS_REC.DEBIT_CREDIT_FLAG);
    END LOOP;
COMMIT;
END BANK_STATEMENT;

-----------------------------------------------------------
PROCEDURE UPDATE_CUST_CONTACT_DETAILS(C_CUST_ID IN CUSTOMER.CUST_ID%TYPE, 
    C_EMAIL IN CUSTOMER.EMAIL%TYPE, 
    C_MOB_NO IN CUSTOMER.MOB_NO%TYPE) 
AS
BEGIN
    UPDATE CUSTOMER
    SET EMAIL = C_EMAIL, MOB_NO = C_MOB_NO
    WHERE CUST_ID = C_CUST_ID;
COMMIT;
END UPDATE_CUST_CONTACT_DETAILS;

-----------------------------------------------------------------
PROCEDURE CUST_TRANSACTION (
    CT_USERNAME IN CUSTOMER.USERNAME%TYPE, 
    CT_PASSWORD IN CUSTOMER.PASSWORD%TYPE, 
    CT_ACC_NO IN ACCOUNT.ACC_NO%TYPE, 
    CT_RECEIVER_ACC_NO IN ACCOUNT.ACC_NO%TYPE, 
    CT_AMOUNT IN TRANSACTION.AMOUNT%TYPE,
    CT_TRANS_TYPE IN TRANSACTION.TRANS_TYPE%TYPE
)
IS
UNAME VARCHAR(50);
PASS VARCHAR(50);
COUNT_SEND_ACC INT;
COUNT_REC_ACC INT;
S_ACC_NO INT;
R_ACC_NO INT;
SENDER_BAL FLOAT;
INV_USER EXCEPTION;
INV_TRANS EXCEPTION;
INV_ACC EXCEPTION;
INV_AMT EXCEPTION;
BEGIN

    SELECT C.USERNAME INTO UNAME FROM DB_ADMIN.CUSTOMER C 
    JOIN DB_ADMIN.ACCOUNT A ON A.CUST_ID = C.CUST_ID 
    WHERE A.ACC_NO = CT_ACC_NO;
    
    SELECT C.PASSWORD INTO PASS FROM DB_ADMIN.CUSTOMER C 
    JOIN DB_ADMIN.ACCOUNT A ON A.CUST_ID = C.CUST_ID 
    WHERE A.ACC_NO = CT_ACC_NO;
    
    SELECT COUNT(*) INTO COUNT_REC_ACC FROM DB_ADMIN.ACCOUNT 
    WHERE ACC_NO = CT_RECEIVER_ACC_NO AND STATUS = 'ACTIVE';
    
    SELECT COUNT(*) INTO COUNT_SEND_ACC FROM DB_ADMIN.ACCOUNT 
    WHERE ACC_NO = CT_ACC_NO AND STATUS = 'ACTIVE';
    
    SELECT BALANCE INTO SENDER_BAL FROM DB_ADMIN.ACCOUNT 
    WHERE ACC_NO = CT_ACC_NO;
    
    IF CT_USERNAME <> UNAME AND CT_PASSWORD <>PASS
        THEN RAISE INV_USER;
    ELSE 
        IF CT_ACC_NO = CT_RECEIVER_ACC_NO
            THEN RAISE INV_TRANS;
        ELSE 
            IF COUNT_REC_ACC < 1 
                THEN RAISE INV_ACC;
            ELSE 
                IF SENDER_BAL - CT_AMOUNT < 500
                    THEN RAISE INV_AMT;
                ELSE
                    UPDATE ACCOUNT
                    SET BALANCE = BALANCE - CT_AMOUNT
                    WHERE ACC_NO = CT_ACC_NO;
                    
                    UPDATE ACCOUNT
                    SET BALANCE = BALANCE + CT_AMOUNT
                    WHERE ACC_NO = CT_RECEIVER_ACC_NO;
                    
                    INSERT INTO TRANSACTION VALUES (TRANS_SEQ.NEXTVAL, CT_ACC_NO, CT_RECEIVER_ACC_NO, CT_TRANS_TYPE, SYSDATE, CT_AMOUNT, 'DEBIT');
                    INSERT INTO TRANSACTION VALUES (TRANS_SEQ.NEXTVAL, CT_RECEIVER_ACC_NO, CT_ACC_NO, CT_TRANS_TYPE, SYSDATE, CT_AMOUNT, 'CREDIT');
                    
                    
                END IF;
            END IF;
        END IF;
    END IF;
    
    EXCEPTION 
        WHEN INV_USER THEN DBMS_OUTPUT.PUT_LINE('INVALID USERNAME AND PASSWORD');
        WHEN INV_TRANS THEN DBMS_OUTPUT.PUT_LINE('SENDER AND RECEIVER ACCOUNTS CANNOT BE SAME');
        WHEN INV_ACC THEN DBMS_OUTPUT.PUT_LINE('RECEIVERS ACCOUNT DOES NOT EXIST');
        WHEN INV_AMT THEN DBMS_OUTPUT.PUT_LINE('BALANCE IS NOT SUFFICIENT TO MAKE A TRANSACTION');
        
COMMIT;

END CUST_TRANSACTION;


END CUST_ACT_PK;
/